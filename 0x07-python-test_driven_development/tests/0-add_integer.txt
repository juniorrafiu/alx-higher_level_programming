The ``add_integer`` module


Importing the function 'add_integr' from add_integer.py

>>> add_integer = __import__('0-add_integer').add_integer
Edge Case Scenario:
performing a regular addition:
>>> add_integer(5, 5)
10

>>> add_integer(0, 8)
8

>>> add_integer(0, 0)
0

>>> add_integer(-4, 8)
4

>>> add_integer(-7, -9)
-16

>>> add_integer(-8, 0)
-8

>>> add_integer(999999999,1 )
1000000000

>>> add_integer(9999999999, 99999999)
10099999998

Adding a large negative number to a positive number:
>>> add_integer(-999999999999, 4444444) #doctest: +ELLIPSIS
-...

Adding two large negative numbers
>>> add_integer(-88898989898, -757575757575) #doctest: +ELLIPSIS
-...

>>> add_integer(9, float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

Scenario: Empty or Null inputs:

Passing only one argument to the function:
>>> add_integer(5)
103

Passing no argument to the function:
>>> add_integer() 
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'

Scenario: Unusual inputs:

NaN as inputs:
>>> add_integer(float('nan'),5)
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

letters as inputs:

Adding a letter to a number:


Adding a letter to a letter:
>>> add_integer('a', 'b')
Traceback (most recent call last):
...
TypeError: a must be an integer

Non-numbers as input:

Adding non-number(list) to number:
>>> add_integer([4,5], 9)
Traceback (most recent call last):
...
TypeError: a must be an integer

