========================================
Test for the ``lazy_matrix_mul`` function
in the ``101-lazy_matrix_mul.py`` module
========================================

Using ``lazy_matrix_mul``
------------------------

Importing the function ``lazy_matrix_mul`` from ``101-lazy_matrix_mul.py``
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Edge Case Scenarios:

regular inputs:
Both m_a and m_b being list of list of numbers
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13 16]]

m_a being a string and m_b being a list of list of numbers
    >>> print(lazy_matrix_mul("hello there",[[1, 2]]))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

m_a being a list of list of integers and m_b being a string
    >>> print(lazy_matrix_mul([[1, 2]], "hello there"))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

m_a being just a list and m_b being a list of list of integers
    >>> print(lazy_matrix_mul([1, 2], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

m_a being a list of list of integers and m_b being a list
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [1, 2]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

m_a being empty and m_b being a list of list of numbers
    >>> print(lazy_matrix_mul([[]], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

m_a being a list of list of integers andd m_b being empty
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[]]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)
    
m_a being a list of list of non-numbers and m_b being a list of list of numbers
    >>> print(lazy_matrix_mul([['hello','there']], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

m_a being a list of a list of integers and m_b being a list of list of non_numbers
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [['hello','there']]))
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

ma being a list of lists of number of various size and mb being a list of lists of number
    >>> m_a = [[1, 2], [3, 4, 5]]
    >>> m_b = [[1, 2],[3, 4]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

m_b being a list of lists of number of various size and m_a being a list of lists of number
    >>> m_a = [[1, 2],[3, 4]]
    >>> m_b = [[1, 2], [3, 4, 5]]
    >>> print(lazy_matrix_mul(m_a, m_b))   
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

checking for m_a and m_b can't be multiplied
    >>> m_a = [[1, 2],[3, 4]]
    >>> m_b = [[1, 2],[2, 3],[4, 5]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

Test for function missing one argument:
    >>> print(lazy_matrix_mul([[1, 2],[2, 3]]))
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Test for function missing two arguments:
    >>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
